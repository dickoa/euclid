% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bbox.R
\name{bbox}
\alias{bbox}
\alias{is_bbox}
\alias{as_bbox}
\alias{is_overlapping}
\alias{\%overlaps\%}
\title{Create a vector of bounding boxes}
\usage{
bbox(...)

is_bbox(x)

as_bbox(x)

is_overlapping(x, y)

x \%overlaps\% y
}
\arguments{
\item{...}{Either a vector of geometries or a range of numeric vectors (4 for
2D bounding boxes and 6 for 3D) interpreted in the order xmin, ymin, zmin,
xmax, ymax, zmax.}

\item{x, y}{vectors of bounding boxes or geometries}
}
\value{
An \code{euclid_bbox} vector
}
\description{
Bounding boxes denote the exten of geometries. It follows that bounding boxes
are only defined for geometries that are located in space and have finite
extent. Thus, vectors, lines, directions, rays, etc. does not have bounding
boxes, while e.g. spheres, circles, segments, etc has. Since the extent of
geometries cannot always be given exact (e.g. for circles), bounding boxes
are defined in regular floating point precision. Bounding boxes can be
compared for equality and be tested for whether they overlap. Adding bounding
boxes together will give the bounding box containing both.
}
\examples{
# Construction
bbox(10, -2, 15, 0)

seg <- segment(point(sample(10, 4), sample(10, 4)),
               point(sample(10, 4), sample(10, 4)))

boxes <- bbox(seg)
boxes

plot(seg)
euclid_plot(boxes, fg = "firebrick")

# Comparison
boxes[1] == boxes

boxes[1:2] \%overlaps\% boxes[3:4]

# Addition
boxes[1] + boxes[2]

cumsum(boxes)

plot(sum(boxes), bg = "grey", fg = NA)
euclid_plot(boxes)

# Conversion
as.matrix(boxes)

}
