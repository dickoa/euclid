% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geometry_plot.R
\name{euclid_plot}
\alias{euclid_plot}
\alias{euclid_grob}
\alias{plot.euclid_geometry}
\title{Plotting functions for geometries}
\usage{
euclid_plot(x, ..., mapping_plane = "z")

euclid_grob(
  x,
  ...,
  unit = "native",
  name = NULL,
  gp = gpar(),
  vp = NULL,
  mapping_plane = "z"
)

\method{plot}{euclid_geometry}(
  x,
  y,
  xlim = NULL,
  ylim = NULL,
  mapping_plane = "z",
  add = FALSE,
  axes = TRUE,
  frame.plot = axes,
  ...
)
}
\arguments{
\item{x}{A geometry vector}

\item{...}{Arguments passed along to the specific drawing method.
\itemize{
\item points (and weighted points) use \code{\link[graphics:points]{points()}} and
\code{\link[grid:grid.points]{pointsGrob()}}
\item circles use \code{\link[graphics:symbols]{symbols()}} and
\code{\link[grid:grid.circle]{circleGrob()}}
\item directions and vectors use \code{\link[graphics:arrows]{arrows()}} and
\code{\link[grid:grid.segments]{segmentsGrob()}}
\item iso rectangles and bounding boxes use \code{\link[graphics:symbols]{symbols()}} and
\code{\link[grid:grid.rect]{rectGrob()}}
\item lines, rays, and segments use \code{\link[graphics:segments]{segments()}} and
\code{\link[grid:grid.segments]{segmentsGrob()}}
\item triangles use \link[graphics:polygon]{polygon()} and
\code{\link[grid:grid.polygon]{polygonGrob()}}
}}

\item{mapping_plane}{either \code{"x"}, \code{"y"}, \code{"z"}, or a scalar plane geometry}

\item{unit}{The \link[grid:unit]{unit} the values in the geometry corresponds to.}

\item{name}{The name of the created grob}

\item{gp}{A \link[grid:gpar]{gpar} object giving the graphical parameters to use
for rendering}

\item{vp}{A \link[grid:viewport]{viewport} or \code{NULL}}
}
\value{
\code{euclid_plot} is called for its side effects, \code{euclid_grob} returns a
\link[grid:grid.grob]{grob}
}
\description{
euclid provide interfaces for both base and grid graphics that allows you to
visualise the geometries you are working with. There is only functionality
for 2D geometries so 3D geometries will be mapped to the plane given by the
\code{mapping_plane} argument. The \code{plot} method for geometries will behave like
the base \code{\link[=plot]{plot()}} method and set up a new plotting window based on the
given settings. \code{euclid_plot} will add to the existing plot and thus use the
coordinate system currently in effect. \code{euclid_grob} will create a grob that
can be rendered with \code{\link[grid:grid.draw]{grid.draw()}}.
}
