% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transform.R
\name{affine_transformation}
\alias{affine_transformation}
\alias{affine_identity}
\alias{affine_matrix}
\alias{affine_translate}
\alias{affine_scale}
\alias{affine_rotate}
\alias{is_affine_transformation}
\alias{as_affine_transformation}
\alias{inverse}
\alias{is_reflecting}
\title{Create affine transformation matrices}
\usage{
affine_identity(dim = 2L)

affine_matrix(x)

affine_translate(vec)

affine_scale(fac, dim = 2L)

affine_rotate(rho, axis = NA, direction = NA, yaw = NA, pitch = NA, roll = NA)

is_affine_transformation(x)

as_affine_transformation(x)

inverse(x)

is_reflecting(x)
}
\arguments{
\item{dim}{The dimensionality of the transformation matrix}

\item{x}{An object that can be converted to an affine transformation matrix
vector. Matrices and arrays can be converted provided they have the correct
dimensions. List of matrices can be converted provided that all matrices have
the same dimensions and that the dimensions is correct}

\item{vec}{A vector of vectors or an object convertible to one}

\item{fac}{A scaling factor to apply}

\item{rho}{An angle in radians to rotate (counterclockwise)}

\item{axis}{For 3 dimensional rotation, which axis to rotate around}

\item{direction}{A direction vector or an object convertible to one}

\item{yaw, pitch, roll}{Angles in radians for yaw, pitch, and roll rotation.}
}
\value{
An \code{euclid_affine_transformation} vector
}
\description{
These functions allow you to create vectors of transformation matrices for
affine transformation in 2 or 3 dimensions. Transformation matrices are used
to apply transformations to geometries using \code{\link[=transform]{transform()}}. Transformations
can be stacked by multiplying them together. This is generally more
performant than applying transformations one by one to geometries.
Transformations can be reversed by applying the inverse transformation to a
geometry. The inverse transformation matrix can be obtained using
\code{inverse()}. Affine transformation matrices have an additional column and row
compared to linear transformation matrices. This means that matrices for 2
dimensional transformations are 3x3 and matrices for 2 dimensional
transformations are 4x4. In both cases the last row will consist of 0's and a
final scaling factor (usually 1). Rotation is generally not possible to do
while maintaining exactness as sine and cosine cannot be calculate to
exactness. 3 dimensional rotation can either be done around an axis, around
a direction, or be defining specific angles of rotation for yaw, pitch, and
roll.
}
\examples{
# Rotate triangle around its centroid and then around the center
p <- point(sample(10, 3), sample(10, 3))
t <- triangle(p[1], p[2], p[3])

ct <- centroid(t)
# Assemble transformation (remember reverse order)
trans <- affine_rotate(pi/4) *
  affine_translate(vec(ct)) *
  affine_rotate(2*pi/5) *
  affine_translate(-vec(ct))

t2 <- transform(t, trans)

plot(c(t, t2), col = c("grey", "firebrick"), border = NA)

}
