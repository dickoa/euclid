% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geometry_predicates.R
\name{geometry_turns}
\alias{geometry_turns}
\alias{turns_left}
\alias{turns_right}
\alias{turn_along}
\title{Query the side of the turn constructed by three consecutive points}
\usage{
turns_left(x, y, z)

turns_right(x, y, z)

turn_along(x)
}
\arguments{
\item{x, y, z}{Vectors of 2D points}
}
\value{
Either a logical vector or an integer vector (for \code{turn_along()})
}
\description{
In 2D the bend three consecutive points form can be oriented either to the
left or two the right. Asking whether it takes a left turn is equivalent to
asking whether \code{z} lies on the positive side of the supporting line of
\code{x}->\code{y}. euclid provides two predicate functions to check whether left or
right turns are constructed from three given point vectors (note that
collinear points will be \code{FALSE} for both predicates). It also provides a
function that calculate turn orientation along a single vector of points. The
result of this are given as: \code{1} (left), \code{0} (collinear), or \code{-1} (right).
Note that the output of \code{turn_along()} is two elements shorter than the
input.
}
\examples{
p <- point(sample(20, 12), sample(20, 12))

turns_left(p[1:4], p[5:8], p[9:12])

turn_along(p)

plot(segment(p[-12], p[-1]))
euclid_plot(p[-c(1, 12)][turn_along(p) == 1], pch = 16, col = "firebrick")
euclid_plot(p[-c(1, 12)][turn_along(p) == -1], pch = 16, col = "steelblue")

}
