% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/point.R, R/point_w.R
\name{point}
\alias{point}
\alias{is_point}
\alias{as_point}
\alias{as_weighted_point}
\title{Vector of points}
\usage{
point(..., default_dim = 2)

is_point(x)

as_point(x)

as_weighted_point(x)
}
\arguments{
\item{...}{Various input. See the Constructor section.}

\item{default_dim}{The dimensionality when constructing an empty vector}

\item{x}{A point vector or an object to convert to it}
}
\value{
a \code{euclid_point} vector
}
\description{
Points are the fundamental unit in geometry, from which other geometric
primitives can be constructed. Points support less than and greater than
operations which are handled lexicographically. This means that point vectors
can also be sorted and ranked. Subtracking a point from a point gives a
vector. Adding and subtracting a vector to a point translates the point by
the vector.
}
\section{Constructors}{

\strong{2 dimensional points}
\itemize{
\item Providing two numeric vector will construct points with those x and y
coordinate.
\item Providing a vector will construct a point at the location the vector
points to.
\item Providing a weighted point vector will create a points at the same
locations without weights.
}

\strong{3 dimensional points}
\itemize{
\item Providing three numeric vector will construct points with those x, y, and z
coordinate.
\item Providing a vector will construct a point at the location the vector
points to.
\item Providing a weighted point vector will create a points at the same
locations without weights.
}
}

\examples{
num1 <- exact_numeric(runif(5))
num2 <- exact_numeric(runif(5))
num3 <- exact_numeric(runif(5))

# 2 dimensions
p <- point(num1, num2)
p

# 3 dimensions
point(num1, num2, num3)

# Standard R vectors are automatically converted to exact_numeric vectors
point(runif(5), runif(5))

# Convert points to vectors
as_vec(p)

# Arithmetic
# Translate by adding vector
p + vec(3, 7)

# Create vector by subtracting points
p[1:2] - p[3:4]

# Sorting etc.
sort(p)
min(p)
cummax(p)
rank(p)
p[1:2] < p[3:4]

}
