% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vector.R
\name{vec}
\alias{vec}
\alias{is_vec}
\alias{as_vec}
\title{Vector of vectors}
\usage{
vec(..., default_dim = 2)

is_vec(x)

as_vec(x)
}
\arguments{
\item{...}{Various input. See the Constructor section.}

\item{default_dim}{The dimensionality when constructing an empty vector}

\item{x}{A vector of vectors or an object to convert to it}
}
\value{
An \code{euclid_vector} vector
}
\description{
A geometrical vector is somewhat different from the concept of a vector in
programming hence the slightly confusing terminology. In geometry a vector is
a direction and a magnitude most often defined by a point in space where the
direction is defined as the direction from the origin to the point and the
magnitude is defined as the distance from the origin to the point.
}
\section{Constructors}{

\strong{2 dimensional vectors}
\itemize{
\item Providing a point will construct vectors pointing to the points from the
origin centered.
\item Providing two exact numeric vectors will construct vectors pointing to the
point defined by the coordinates given.
\item Providing a ray will construct vectors pointing in the same direction as
the ray
}

\strong{3 dimensional vectors}
\itemize{
\item Providing a point will construct vectors pointing to the points from the
origin centered.
\item Providing three exact numeric vectors will construct vectors pointing to
the point defined by the coordinates given.
\item Providing a ray will construct vectors pointing in the same direction as
the ray
}
}

\examples{

# Create vectors from points:
v1 <- vec(x = 1:5, y = 4:8)

# Vectors can be added and subtracted
v1[1] + v1[2]

v1[5] - v1[3]

# You can invert a vector by taking its negative
-v1

# As vectors can be added you can also use sum() and cumsum()
sum(v1)
cumsum(v1)

# Multiplying and dividing a vector by a numeric changes its magnitude
v1 * 10
v1 / 2.5

# Multiplying two vectors gives the inner product of the two
v1[1:2] * v1[3:4]

# Vectors can be converted to points, directions and transformation matrices
as_point(v1)
as_direction(v1)
as_affine_transformation(v1)

}
